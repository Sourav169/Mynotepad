{"version":3,"sources":["component/Note.js","component/List.js","component/Listitem.js","App.js","serviceWorker.js","index.js"],"names":["Note","_this$props","this","props","title","content","handlechange","handlesubmit","react_default","a","createElement","className","Card","Body","Title","Text","Form","Group","controlId","Label","Control","type","placeholder","id","value","onChange","evt","Button","variant","onClick","React","Component","List","items","handleDelete","handleUpdate","clearItem","map","item","key","Subtitle","App","state","uuid","edit","e","_this","setState","Object","defineProperty","target","preventDefault","newItem","console","log","updateItem","concat","toConsumableArray","filteritem","filter","select","find","component_Note","component_List","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.00673ddf.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from 'react-bootstrap/Card'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nclass Note extends React.Component {\r\n    render() {\r\n        const{title,content,handlechange,handlesubmit}=this.props;\r\n        return (\r\n            <div className=\"container my-3 bg-info\">\r\n                <Card className=\" container my-3 bg-info\" />\r\n\r\n                <Card.Body className=\"bg-primary mh-100\">\r\n                    <Card.Title>Notes</Card.Title>\r\n                    <Card.Text>\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>Title</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter title\" id=\"task\"  value={title} onChange={(evt)=>handlechange(evt,'title')}/>\r\n                            <Form.Text className=\"text-muted\">\r\n    </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formBasicPassword\">\r\n                            <Form.Label>Content</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Note\" id=\"content\" value={content} onChange={(evt)=>handlechange(evt,'content')} />\r\n                        </Form.Group>\r\n                    </Card.Text>\r\n                    <Button id=\"btn\" variant=\"danger\" onClick={handlesubmit}>Submit</Button>\r\n                </Card.Body>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Note;\r\n","import React from 'react';\r\nimport ListItem from './Listitem'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\n\r\nclass List extends React.Component {\r\n    render() {\r\n        const { items, handleDelete, handleUpdate, clearItem } = this.props\r\n        return (\r\n            <div id=\"notes\">\r\n                <h1>NOTES ARE</h1>\r\n                {  \r\n                    items.map(item => (\r\n\r\n\r\n                        <div className=\"note\" key={item.id}>\r\n                            <Card className=\"  container my-3 bg-info\">\r\n                                <Card.Body>\r\n                                    <Card.Title id=\"notetitle\">\r\n                                        {item.title}\r\n                                          \r\n   \r\n                                        </Card.Title>\r\n                                    <Card.Subtitle className=\"mb-2 text-muted\"></Card.Subtitle>\r\n                                    <Card.Text id='notecontent'>\r\n                                        {item.content}\r\n                                    </Card.Text>\r\n                                    <button id=\"dltbtn\" onClick={() => handleDelete(item.id)}>Delete</button>\r\n                                    <button   id=\"edtbtn\"onClick={() => handleUpdate(item.id)}>Update</button>\r\n                                </Card.Body>\r\n                            </Card>\r\n\r\n                        </div>\r\n\r\n\r\n                    ))\r\n                }\r\n                {\r\n                    <button onClick={clearItem}> Clear Item</button>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default List;\r\n","import React from 'react';\r\nimport Card from 'react-bootstrap/Card'\r\n\r\n\r\n\r\nclass ListItem extends  React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                {\r\n                <Card style={{ width: '18rem' }}>\r\n  <Card.Body>\r\n    <Card.Title>NOTES</Card.Title>\r\n    <Card.Subtitle className=\"mb-2 text-muted\"></Card.Subtitle>\r\n    <Card.Text>\r\n     \r\n    </Card.Text>\r\n    <button>DELETE</button>\r\n    <button>UPDATE</button>\r\n  </Card.Body>\r\n</Card>\r\n    }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ListItem;\r\n","import React from 'react';\r\nimport Note from './component/Note'\r\nimport List from './component/List'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport uuid from 'react-uuid';\r\nimport './App.css';\r\n\r\nclass App extends  React.Component{\r\n    state={\r\n        items:[],\r\n        id:uuid(),\r\n        title:'',\r\n        content:'',\r\n        edit:false\r\n    };\r\n    handlechange=(e,key)=>{\r\n        this.setState({\r\n         [key]:e.target.value\r\n            \r\n        });\r\n  \r\n    };\r\n   \r\n    handlesubmit=(e)=>{\r\n        e.preventDefault();\r\n        if(this.state.title!==null){\r\n        var newItem={\r\n            id:this.state.id,\r\n            title:this.state.title,\r\n            content:this.state.content\r\n        }\r\n    }\r\n        console.log(newItem);\r\n        const updateItem=[...this.state.items,newItem];\r\n        this.setState({\r\n            id:uuid(),\r\n            title:'',\r\n            content:'',\r\n            items:updateItem,\r\n            edit:false\r\n        });\r\n    }\r\n     handleDelete=(id)=>{\r\n         const filteritem=this.state.items.filter(item=>item.id!==id);\r\n         this.setState({\r\n            items:filteritem\r\n         });\r\n     };\r\n     handleUpdate=(id)=>{\r\n        const filteritem=this.state.items.filter(item=>item.id!==id);\r\n        const select=this.state.items.find(item=>item.id===id);\r\n        if(select.title!==null){\r\n        this.setState({\r\n           items:filteritem,\r\n           title:select.title,\r\n           content:select.content\r\n        });\r\n    }\r\n     };\r\n     clearItem=(e)=>{\r\n         this.setState({\r\n           items:[]\r\n         });\r\n     };\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n            <h1 className=\"heading\" > NOTEPAD</h1>\r\n           <Note title={this.state.title}  content={this.state.content} handlechange={this.handlechange} handlesubmit={this.handlesubmit}/>\r\n           <List items={this.state.items} handleDelete={this.handleDelete} handleUpdate={this.handleUpdate} clearItem={this.clearItem}/>\r\n           </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}